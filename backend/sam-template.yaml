AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The CAG Racing Manager

Globals:
  Function:
    Runtime: java8
    Timeout: 60
    MemorySize: 256

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: The stage for the stack (identifies all resources)

Resources:
  # AppSync section
  AppSyncRegisteredUsersTableRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub appsync-registered-users-table-role-${StageName}
      ManagedPolicyArns:
        - Ref: AppSyncRegisteredUsersTablePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncRegisteredUsersTablePolicy

  AppSyncRegisteredUsersTablePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the registered-users table created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join [ "", [ !GetAtt RegisteredUsersTable.Arn, "*" ] ]

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Description: The GraphQL API for the CAG Racing Manager
    Properties:
      AuthenticationType: API_KEY
      Name: !Sub racing-manager-gql-api-${StageName}

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: ../cag-racing-manager-api.graphql

  AppSyncRegisteredUsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: AppSync data source for the registered-users table
      DynamoDBConfig:
        TableName: !Ref RegisteredUsersTable
        AwsRegion: !Sub ${AWS::Region}
      Name: !Sub registered_users_table_${StageName}
      ServiceRoleArn: !GetAtt AppSyncRegisteredUsersTableRole.Arn
      Type: AMAZON_DYNAMODB

  # API Gateways
  ClientRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: cloud-racing-client-api-${StageName}
      StageName:
        Ref: StageName

  RaspberryRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: cloud-racing-raspberry-api-${StageName}
      StageName:
        Ref: StageName

  # Lambdas
  StartGatePassageDetectedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: start-gate-passage-detected-${StageName}
      CodeUri: start-gate-passage-detected-lambda/target/start-gate-passage-detected-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.startgatepassedlambda.service.StartGatePassedHandler::execute
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: CurrentRaceTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /start-gate-passed
            Method: POST
            RestApiId:
              Ref: RaspberryRestApi


  RegisterContestantFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: register-contestant-${StageName}
      CodeUri: register-contestant-lambda/target/register-contestant-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.registercontestant.service.RegisterContestantHandler::createContestant
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: RegisteredUsersTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /registered-users
            Method: POST
            RestApiId:
              Ref: ClientRestApi

  # DynamoDB
  RegisteredUsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: registered-users-${StageName}
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CurrentRaceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: current-race-${StageName}
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  RacesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: races-${StageName}
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
