AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The CAG Racing Manager

Globals:
  Function:
    Runtime: java8
    Timeout: 60
    MemorySize: 256

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: The stage for the stack (identifies all resources)

Resources:
  # AppSync section
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      # Expires at 2020-03-01
      Expires: 1583020800

  AppSyncRegisteredUsersTableRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub appsync-registered-users-table-role-${StageName}
      ManagedPolicyArns:
        - Ref: AppSyncRegisteredUsersTablePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncRegisteredUsersTablePolicy

  AppSyncRegisteredUsersTablePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the registered-users table created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join [ "", [ !GetAtt RegisteredUsersTable.Arn, "*" ] ]

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Description: The GraphQL API for the CAG Racing Manager
    Properties:
      AuthenticationType: API_KEY
      Name: !Sub racing-manager-gql-api-${StageName}

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: ../cag-racing-manager-api.graphql

  AppSyncRegisteredUsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: AppSync data source for the registered-users table
      DynamoDBConfig:
        TableName: !Ref RegisteredUsersTable
        AwsRegion: !Sub ${AWS::Region}
      Name: !Sub registered_users_table_data_source_${StageName}
      ServiceRoleArn: !GetAtt AppSyncRegisteredUsersTableRole.Arn
      Type: AMAZON_DYNAMODB

  AppSyncRegisteredUsersResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: SystemState
      FieldName: registeredUsers
      DataSourceName: !GetAtt AppSyncRegisteredUsersDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan",
            ## Add 'limit' and 'nextToken' arguments to this field in your schema to implement pagination. **
            ## "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
            ## "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)


  # API Gateways
  ClientRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: cloud-racing-client-api-${StageName}
      StageName:
        Ref: StageName

  RaspberryRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: cloud-racing-raspberry-api-${StageName}
      StageName:
        Ref: StageName

  # Lambdas
  # RaspberryRestApi
  StartGatePassageDetectedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: start-gate-passage-detected-${StageName}
      CodeUri: start-gate-passage-detected-lambda/target/start-gate-passage-detected-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.startgatepassedlambda.service.StartGatePassedHandler::execute
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: CurrentRaceTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /start-gate-passed
            Method: POST
            RestApiId:
              Ref: RaspberryRestApi

  SplitGatePassageDetectedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: split-gate-passage-detected-${StageName}
      CodeUri: split-gate-passage-detected-lambda/target/split-gate-passage-detected-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.splitgatepassedlambda.service.SplitGatePassedHandler::execute
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: CurrentRaceTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /split-gate-passed
            Method: POST
            RestApiId:
              Ref: RaspberryRestApi

  FinishGatePassageDetectedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: finish-gate-passage-detected-${StageName}
      CodeUri: finish-gate-passage-detected-lambda/target/finish-gate-passage-detected-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.finishgatepassedlambda.service.FinishGatePassedHandler::execute
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: CurrentRaceTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /finish-gate-passed
            Method: POST
            RestApiId:
              Ref: RaspberryRestApi

  # ClientRestApi
  RegisterContestantFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: register-contestant-${StageName}
      CodeUri: register-contestant-lambda/target/register-contestant-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.registercontestant.service.RegisterContestantHandler::createContestant
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: RegisteredUsersTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /registered-users
            Method: POST
            RestApiId:
              Ref: ClientRestApi

  BailOutFromRaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: bail-out-from-race-${StageName}
      CodeUri: bail-out-from-race-lambda/target/bail-out-from-race-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.bailoutfromrace.service.BailOutFromRaceHandler::bailOutFromRace
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: RacesTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /race-queue
            Method: DELETE
            RestApiId:
              Ref: ClientRestApi

  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: user-login-${StageName}
      CodeUri: user-login-lambda/target/user-login-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.userlogin.service.UserLoginHandler::userLogin
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RegisteredUsersTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: SessionsTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /user-login
            Method: POST
            RestApiId:
              Ref: ClientRestApi

  AbortActiveRaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: abort-active-race-${StageName}
      CodeUri: abort-active-race-lambda/target/abort-active-race-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.abortactiverace.service.AbortActiveRaceHandler::abortActiveRace
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: CurrentRaceTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /abort-active-race
            Method: DELETE
            RestApiId:
              Ref: ClientRestApi

  SignupForRaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: signup-for-race-${StageName}
      CodeUri: signup-for-race-lambda/target/signup-for-race-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.signupforrace.service.SignUpForRaceHandler::signUpForRace
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RaceQueueTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RegisteredUsersTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /race-queue
            Method: POST
            RestApiId:
              Ref: ClientRestApi

  # DynamoDB
  RegisteredUsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: registered-users-${StageName}
      PrimaryKey:
        Name: name
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CurrentRaceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: current-race-${StageName}
      PrimaryKey:
        Name: raceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  RacesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: races-${StageName}
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  SessionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: sessions-${StageName}
      PrimaryKey:
        Name: token
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  RaceQueueTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: race-queue-${StageName}
      PrimaryKey:
        Name: raceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1