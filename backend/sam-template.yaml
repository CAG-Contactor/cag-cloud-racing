AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The CAG Racing Manager

Globals:
  Function:
    Runtime: java8
    Timeout: 60
    MemorySize: 256

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: The stage for the stack (identifies all resources)

Resources:
# DO NOT USE THIS FOR NOW, SINCE IT SURPASSES THE GRAPHQLAPI LIMIT.
#  AppSync section
#  AppSyncApiKey:
#    Type: AWS::AppSync::ApiKey
#    Properties:
#      ApiId: !GetAtt AppSyncApi.ApiId
#      # Expires at 2020-03-01
#      Expires: 1583020800
#
#  AppSyncRegisteredUsersTableRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: !Sub appsync-registered-users-table-role-${StageName}
#      ManagedPolicyArns:
#        - Ref: AppSyncRegisteredUsersTablePolicy
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Action:
#              - sts:AssumeRole
#            Principal:
#              Service:
#                - appsync.amazonaws.com
#    DependsOn:
#      - AppSyncRegisteredUsersTablePolicy
#
#  AppSyncRegisteredUsersTablePolicy:
#    Type: AWS::IAM::ManagedPolicy
#    Properties:
#      Description: Managed policy to allow AWS AppSync to access the registered-users table created by this template.
#      Path: /appsync/
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Action:
#              - dynamodb:GetItem
#              - dynamodb:PutItem
#              - dynamodb:DeleteItem
#              - dynamodb:UpdateItem
#              - dynamodb:Query
#              - dynamodb:Scan
#              - dynamodb:BatchGetItem
#              - dynamodb:BatchWriteItem
#            Resource: !Join [ "", [ !GetAtt RegisteredUsersTable.Arn, "*" ] ]
#
#  AppSyncApi:
#    Type: AWS::AppSync::GraphQLApi
#    Description: The GraphQL API for the CAG Racing Manager
#    Properties:
#      AuthenticationType: API_KEY
#      Name: !Sub racing-manager-gql-api-${StageName}
#
#  AppSyncSchema:
#    Type: AWS::AppSync::GraphQLSchema
#    Properties:
#      ApiId: !GetAtt AppSyncApi.ApiId
#      DefinitionS3Location: ../cag-racing-manager-api.graphql
#
#  AppSyncRegisteredUsersDataSource:
#    Type: AWS::AppSync::DataSource
#    Properties:
#      ApiId: !GetAtt AppSyncApi.ApiId
#      Description: AppSync data source for the registered-users table
#      DynamoDBConfig:
#        TableName: !Ref RegisteredUsersTable
#        AwsRegion: !Sub ${AWS::Region}
#      Name: !Sub registered_users_table_data_source_${StageName}
#      ServiceRoleArn: !GetAtt AppSyncRegisteredUsersTableRole.Arn
#      Type: AMAZON_DYNAMODB
#
#  AppSyncRegisteredUsersResolver:
#    Type: AWS::AppSync::Resolver
#    Properties:
#      ApiId: !GetAtt AppSyncApi.ApiId
#      TypeName: SystemState
#      FieldName: registeredUsers
#      DataSourceName: !GetAtt AppSyncRegisteredUsersDataSource.Name
#      RequestMappingTemplate: |
#        {
#            "version" : "2017-02-28",
#            "operation" : "Scan",
#            ## Add 'limit' and 'nextToken' arguments to this field in your schema to implement pagination. **
#            ## "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
#            ## "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
#        }
#      ResponseMappingTemplate: |
#        $util.toJson($ctx.result.items)


  # API Gateways
  ClientRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: cloud-racing-client-api-${StageName}
      StageName:
        Ref: StageName

  RaspberryRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: cloud-racing-raspberry-api-${StageName}
      StageName:
        Ref: StageName

  # Lambdas
  # RaspberryRestApi
  GatePassageDetectedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: gate-passage-detected-${StageName}
      CodeUri: gate-passage-detected-lambda/target/gate-passage-detected-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.gatepassedlambda.service.GatePassedHandler::execute
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: CurrentRaceTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /gate-passed
            Method: POST
            RestApiId:
              Ref: RaspberryRestApi

  # ClientRestApi
  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: registered-user-${StageName}
      CodeUri: registered-user-handler/target/registered-user-handler-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.registereduser.service.RegisteredUserHandler::route
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RegisteredUsersTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
      Events:
        RegisterUser:
          Type: Api
          Properties:
            Path: /registered-user
            Method: POST
            RestApiId:
              Ref: ClientRestApi
        DeleteUserByName:
          Type: Api
          Properties:
            Path: /registered-user/{name}
            Method: DELETE
            RestApiId:
              Ref: ClientRestApi
        GetUserByName:
          Type: Api
          Properties:
            Path: /registered-user/{name}
            Method: GET
            RestApiId:
              Ref: ClientRestApi
        GetUsers:
          Type: Api
          Properties:
            Path: /registered-users
            Method: GET
            RestApiId:
              Ref: ClientRestApi
        GetUserRace:
          Type: Api
          Properties:
            Path: /registered-user/{name}/race
            Method: GET
            RestApiId:
              Ref: ClientRestApi

  RaceQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: race-queue-${StageName}
      CodeUri: race-queue-handler/target/race-queue-handler-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.racequeue.service.RaceQueueHandler::route
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RaceQueueTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RegisteredUsersTable
      Events:
        DeleteEvent:
          Type: Api
          Properties:
            Path: /race-queue
            Method: DELETE
            RestApiId:
              Ref: ClientRestApi
        GetEvent:
          Type: Api
          Properties:
            Path: /race-queue
            Method: GET
            RestApiId:
              Ref: ClientRestApi
        PostEvent:
          Type: Api
          Properties:
            Path: /race-queue
            Method: POST
            RestApiId:
              Ref: ClientRestApi


  CurrentRaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: current-race-${StageName}
      CodeUri: current-race-handler/target/current-race-handler-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.currentrace.service.CurrentRaceHandler::route
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RacesTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RaceQueueTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: CurrentRaceTable
      Events:
        DeleteEvent:
          Type: Api
          Properties:
            Path: /current-race
            Method: DELETE
            RestApiId:
              Ref: ClientRestApi
        GetEvent:
          Type: Api
          Properties:
            Path: /current-race
            Method: GET
            RestApiId:
              Ref: ClientRestApi
        PostEvent:
          Type: Api
          Properties:
            Path: /current-race
            Method: POST
            RestApiId:
              Ref: ClientRestApi

  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: user-login-${StageName}
      CodeUri: user-login-lambda/target/user-login-lambda-1.0-SNAPSHOT.jar
      Handler: se.caglabs.cloudracing.lambda.userlogin.service.UserLoginHandler::userLogin
      Environment:
        Variables:
          Stage: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RegisteredUsersTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: SessionsTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /user-login
            Method: POST
            RestApiId:
              Ref: ClientRestApi

  # DynamoDB
  RegisteredUsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: registered-users-${StageName}
      PrimaryKey:
        Name: name
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CurrentRaceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: current-race-${StageName}
      PrimaryKey:
        Name: raceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  RacesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: races-${StageName}
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  SessionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: sessions-${StageName}
      PrimaryKey:
        Name: token
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  RaceQueueTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: race-queue-${StageName}
      PrimaryKey:
        Name: raceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
