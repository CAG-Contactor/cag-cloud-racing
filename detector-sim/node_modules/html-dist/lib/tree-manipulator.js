'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.treeManipulator = treeManipulator;

var _vtreeSelect = require('vtree-select');

var _vtreeSelect2 = _interopRequireDefault(_vtreeSelect);

var _html = require('./html');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function treeManipulator(tree) {
  return new TreeManipulator(tree);
}

var TreeManipulator = function () {
  function TreeManipulator(tree) {
    _classCallCheck(this, TreeManipulator);

    this.tree = tree;
    this.tagName = tree.tagName;
  }

  _createClass(TreeManipulator, [{
    key: 'remove',
    value: function remove(query) {
      var match = (0, _vtreeSelect2.default)(query);
      var newChildren = this.tree.children.filter(function (c) {
        return !match.matches(c);
      });
      this.tree.children = newChildren;
      return this;
    }
  }, {
    key: 'append',
    value: function append(node) {
      this.tree.children.push(node);
      return this;
    }
  }, {
    key: 'prepend',
    value: function prepend(node) {
      this.tree.children.unshift(node);
      return this;
    }
  }, {
    key: 'replaceWith',
    value: function replaceWith(children) {
      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // TODO: should we take attributes from the existing top level node?
      return treeManipulator(new _html.Node(this.tagName, attributes, children));
    }
  }]);

  return TreeManipulator;
}();